{"ast":null,"code":"var _jsxFileName = \"D:\\\\Mini-Project\\\\travel-planner\\\\src\\\\components\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport chatbotData from \"../data/chatbot.json\"; // ✅ Load JSON file\nimport \"./Chatbot.css\"; // Add styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n\n  // Function to get response from JSON\n  const getResponse = userInput => {\n    const lowerInput = userInput.toLowerCase();\n    for (const item of chatbotData.patterns) {\n      if (lowerInput.includes(item.pattern)) {\n        const randomIndex = Math.floor(Math.random() * item.responses.length);\n        return item.responses[randomIndex]; // Random response from predefined ones\n      }\n    }\n    return \"Sorry, I don't understand. Can you rephrase?\";\n  };\n\n  // Send Message\n  const sendMessage = () => {\n    if (!input.trim()) return;\n    const newMessages = [...messages, {\n      text: input,\n      sender: \"user\"\n    }];\n    setMessages(newMessages);\n    setInput(\"\");\n    setTimeout(() => {\n      const botResponse = getResponse(input);\n      setMessages([...newMessages, {\n        text: botResponse,\n        sender: \"bot\"\n      }]);\n    }, 500);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chat with Recommender\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbox\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.sender}`,\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Ask something...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"bxrUXnlHDt+zalfpk8IFX5tJV48=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","chatbotData","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","input","setInput","getResponse","userInput","lowerInput","toLowerCase","item","patterns","includes","pattern","randomIndex","Math","floor","random","responses","length","sendMessage","trim","newMessages","text","sender","setTimeout","botResponse","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["D:/Mini-Project/travel-planner/src/components/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport chatbotData from \"../data/chatbot.json\"; // ✅ Load JSON file\r\nimport \"./Chatbot.css\"; // Add styling\r\n\r\nconst Chatbot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  // Function to get response from JSON\r\n  const getResponse = (userInput) => {\r\n    const lowerInput = userInput.toLowerCase();\r\n    for (const item of chatbotData.patterns) {\r\n      if (lowerInput.includes(item.pattern)) {\r\n        const randomIndex = Math.floor(Math.random() * item.responses.length);\r\n        return item.responses[randomIndex]; // Random response from predefined ones\r\n      }\r\n    }\r\n    return \"Sorry, I don't understand. Can you rephrase?\";\r\n  };\r\n\r\n  // Send Message\r\n  const sendMessage = () => {\r\n    if (!input.trim()) return;\r\n    const newMessages = [...messages, { text: input, sender: \"user\" }];\r\n    setMessages(newMessages);\r\n    setInput(\"\");\r\n\r\n    setTimeout(() => {\r\n      const botResponse = getResponse(input);\r\n      setMessages([...newMessages, { text: botResponse, sender: \"bot\" }]);\r\n    }, 500);\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <h2>Chat with Recommender</h2>\r\n      <div className=\"chatbox\">\r\n        {messages.map((msg, index) => (\r\n          <div key={index} className={`message ${msg.sender}`}>\r\n            {msg.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"input-box\">\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"Ask something...\"\r\n        />\r\n        <button onClick={sendMessage}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}